1. Czym jest serwlet?
Jest to klasa odpowiedzialna za przetwarzanie żądań HTTP oraz generowanie zawartości która będzie zwracana w odpowiedzi
2. Wymień metody, które pozwalają na obsługę żądań HTTP
doPost, doGet, doPut, doDelete itd.
3. Ile domyślnie instancji serwletu zostanie utworzonych w kontenerze?
Jedna
4. Jaka metoda odpowiada za inicjalizację oraz zniszczenie serwletu?
Odpowiednio init oraz destroy
5. Wymień sposoby konfiguracji serwletów
Poprzez Deployment Descriptor (web.xml) lub adnotacje
6. Czym są filtry w aplikacjach webowych?
Są to klasy wywoływane przed uruchomieniem właściwego serwletu
7. Jaką adnotacją oznaczamy serwlety?
@WebServlet
8. Jaką adnotacją oznaczamy filtry?
@WebFilter
9. Opisz cykl życia filtrów
init() -> doFilter() -> destroy()
10. Wymień 4 zastosowania filtrów
- uwierzytelnianie - sprawdzamy czy użykownik jest zalogowany
- logowanie (od loggera, nie od loginu!) - pozwala na logowanie informacji już na poziomie filtrów
- kompresja - kompresujemy odpowiedź, aby przeglądarka otrzymała ją szybciej
- cache - czasami przez uruchomieniem serwletu można stwierdzić, że odpowiedź się nie zmieniła.
11. Wymień 7 elementów JSF
- Komponenty interfejsu użytkownika
- Zarządzanie ziarnami
- Walidacja danych
- Konwersja danych
- Dynamiczny nasłuch komponentów - podpinanie wyświetlonych danych do beanów w Javie
- Nawigacja
- Facelets - szablony dla JSF
12. Wymień podział EJB
- sesyjne
- sterowane komunikatami - pozwalają na asynchroniczną komunikację
- encje
13. Wymień i opisz rodzaje sesyjnych EJB
- bezstanowe - nie utrzymują informacji o stanie (np. dla każdego usera robimy to samo)
- stanowe - utrzymują stan pomiędzy wywołaniami (np. Koszyk w sklepie)
- singleton
14. Czym jest EJB?
API JavyEE służące do tworzenia komponentów biznesowych
15. Czym jest CDI?
Context and Dependency Injection - standard wstrzykiwania zależności w JavieEE
16. Jaka adnotacja pozwala na wstrzyknięcie zależności?
@Inject
17. Czym jest Dependency Injection?
Wzorzec pozwalający na przekazywanie gotowych instancji obiektów do obiektów które z nich korzystają.
18. Opisz relację pomiędzy CDI a EJB
EJB korzysta z tych samych właściwości co CDI, można powiedzieć, że EJB >= CDI
19. Czym są interceptory?
Są to komponenty pozwalające na dodawanie logiki przed i po wywołaniu metody innego komponentu
20. Jaką adnotacją oznaczamy klasę będącą interceptorem?
@Interceptor
21. Wymień 3 typy interceptorów
- metod biznesowych
- metod cyklu życia
- zdarzeń czasowych EJB
22. Jaką adnotacja oznaczamy interceptory biznesowe?
np. @AroundInvoke
22. Jaką adnotacja oznaczamy interceptory cyklu życia?
np. @PostConstruct
22. Jaką adnotacja oznaczamy interceptory zdarzeń czasowych EJB?
np. @AroundTimeout
23. Czym są dekoratory?
Są to klasy pozwalające na dodanie nowej logiki do istniejącej klasy
24. Jaką adnotacją oznaczamy dekorator i klasę dekorowaną?
Odpowiednio @Decorator i @Decorates
25. Co zostanie wywołane najpierw: dekorator czy interceptor?
Interceptor (Interceptor może np. rozpoczynać transakcję, a dekorator dodawać logikę logowania)
26. Czym są zdarzenia?
Funkcjonalność pozwalająca na redukcję zależności pomiędzy komponentami, działa jak ulepszony wzorzec obserwator. Zdarzenia są pewnego rodzaju szyną danych, która po otrzymaniu informacji o danym zdarzeniu, przekazuje ją do komponentów, które zadeklarowały chęć otrzymywania informacji o danym zdarzeniu.
27. Czym jest Inversion of Control?
Przeniesienie funkcji sterowania (tworzenie obiektów itp) do używanego frameworku, aby zarządzał tym za nas.
28. W jaki sposób powiązane są ze sobą Dependency Injection i Inversion of Control?
DI jest jednym z przykładów realizacji IoC
29. Czym jest JPA?
Jest specyfikacją dotyczącą mapowania obiektowo - relacyjnego (ORM)
30. Za co odpowiada EntityManager w JPA?
Zarządza transakcjami i cyklem życia encji
31. Czym jest trwałość w ORM?
Powiązanie konkretnego obiektu z wierszem w bazie danych
32. Wymień podstawowe usługi JPA
EntityManager, ORM, JPQL, JPA Criteria API
33. Czym jest ORM?
Object Relational Mapping - mapowanie obiektu na wiersz w bazie danych
34. Czym jest JPQL?
Java Persistence Query Language - pozwala na odpytywanie bazy danych za pomocą składni, która nie zależy od dostawcy bazy danych ()
35. Jaka funkcja pozwala na utworzenie zapytania JPQL?
EntityManager.createQuery()
36. Czym jest JPA Criteria API?
Specyfikacja pozwalająca na tworzenie zapytań w notacji stricte obiektowej
37. Czym jest JMS?
Java Messaging Service - jest to standardowy zestaw interfejsów i modeli do tworzenia, czytania i przesyłania komunikatów. Określamy zasób na który wyślemy wiadomość, a nie konkretnego odbiorce
38. Wymień i opisz cechy JMS
- niezawodność - komunikat zostanie dostarczony raz i tylko raz
- loose coupling - wymiana komunikatów uniezależnia kody programów od siebie
- asynchroniczność - dostawca wiadomości może dostarczyć wiadomość klientowi gdy ten się pojawi, a klient nie musi wysyłać prośby o wiadomość
39. Wymień typy komunikatów JMS
- point to point
- publish subscribe
40. Opisz typ komunikatu point to point w JMS
Komunikat trafia do konkretnej kolejki, która przetrzymuje wiadomość, aż odbiorca ją odbierze lub wiadomość wygaśnie.
41. Opisz typ komunikatu publish subscribe w JMS
nadawca wysyła wiadomość do tematu (topic), a wszyscy subskrybenci tego tematu mogą odczytać wiadomość, nadawca i odbiorcy nie muszą o sobie nic wiedzieć (wiadomość trafia tylko do aktywnych klientów)
42. Wymień sposoby budowania web serwisów SOAP
- top-down - tworzymy WSDL i generujemy klasy Javy
- bottom-up - piszemy klasy Javy i generujemy WSDL
43. Czym jest WSDL?
Dokument XML definiujący usługę sieciową
44. Czym jest JAX-WS?
Java API for XML Web Services - API pozwalające na tworzenie i konsumpcję web serwisów (głownie SOAP)
45. Czym jest JAX-RS?
Java API for RESTful Web Services - API pozwalające na tworzenie i konsumpcję web serwisów korzystających z architektury REST
46. Wymień typy wiadomości JMS
TextMessage(String), MapMessage[Map(String, Cokolwiek)], BytesStream(binarna), StreamMessage(strumień wartości prymitywnych typów), ObjectMessage(serializowany obiekt), Message (tylko nagłowek i właściwości, bez ciała)
47. Czym jest WildFly?
Opensourcowy serwer aplikacyjny
48. Wymień i opisz tryby działania WildFly
- samodzielny(standalone) - każda instancja serwera stanowi niezależny proces
- domenowy(domain) - można uruchomić wiele serwerów aplikacji i zarządzać nimi z jednej lokalizacji, może działać na kilku fizycznych maszynach
49. W jaki sposób można zarządzać serwerem aplikacji WildFly?
- interfejs webowy - localhost:9990
- wiersz poleceń - CLI
- pliki konfiguracyjne - XML
50. W jaki sposób można utworzyć użytkownika w WildFly?
Skryptem add-user.sh
51. Wymień zakładki WebConsole WildFly'a
- Configuration
- Deployments
- Runtime
- Access Control
52. Wymień zalety WildFly
- szybkie włączanie
- oparty na niezależnych projektach
- łatwy do testowania
- równoczesne ładowanie klas
53. Wymień cechy paradygmatu SOA
- Zestandaryzowana funkcja interfejsu
- Luźne powiązania
- Niezależność od platformy
- Composable
- Discoverable
- Autonomiczność, rozszerzalność, interoperacyjność
- Reużywalne usługi
54. Co oznacza Composable jako cecha paradygmatu SOA?
Serwisy muszą mieć możliwość łączenia się, celem tworzenia bardziej złożonych usług
55. Co oznacza Discoverable jako cecha paradygmatu SOA?
Każda usługa posiada metadane, które opisują co ona robi
56. Wymień zasady paradygmatu SOA
- biznes steruje usługami, a usługi technologią
- musi istnieć "business agility" czyli szybka adaptacja na zmiany
- procesy biznesowe tłumaczymy na logikę biznesową, tworzymy usługi związane z logiką i oddzielamy logikę biznesową od implementacji
57. Podaj SOA Manifesto
- Business value over technical strategy
- Strategic goals over project-specific benefits
- Intrinsic interoperability over custom integration
- Shared services over specific-purpose implementations
- Flexibility over optimization
- Evolutionary refinement over pursuit of initial perfection
58. Czym jest BPM?
Business Process Management - zarządzanie operacjami skupione na optymalizacji procesów biznesowych
59. Podaj podział metod integracji aplikacji biznesowych 
- zorientowana na dane
- zorientowana na procesy
60. Podaj metody integracji aplikacji biznesowych zorientowanych na dane
- baza danych - wspólna, konsystentna baza danych
- komunikaty - wysyłanie eventów przez kolejki
- RPC - zdalne wywołania metod
61. Podaj metody integracji aplikacji biznesowych zorientowanych na procesy
- orkiestracja usług - modelowanie interakcji pomiędzy usługami wewnątrz pojedynczego procesu biznesowego
- process manager
- choreografia usług
62. Czym jest SOAP?
Simple Object Access Protocol - protokół komunikacyjny korzystający z XML oraz najczęściej protokołu HTTP. Dotyczy przede wszystkim usług sieciowych.
63. Czym jest UDDI?
Universal Description, Discovery and Integration - specyfikacja opisująca w jaki sposób zarejestrować swój Web Service tak, aby inni użytkownicy mogli go odnaleźć
64. Czym jest REST?
REpresentational State Transfer - styl architektury oprogramowania korzystający z protokołu HTTP, jest bezstanowy, zapytanie może korzystać z JSONa, XMLa, plain textu itp
65. Wymień kody odpowiedzi protokołu HTTP
1xx - kody informacyjne np. 100 - kontynuuj (prośba o dalsze wysłanie zapytania)
2xx - kody potwierdzenia np. 200 - OK - wszystko kozak
3xx - kody przekierowania np. 300 - wiele możliwości - dane zapytanie można obsłużyć na kilka sposobów
4xx - kody błędów po stronie klienta np. 404 - nie znaleziono
5xx - kody błędów po stronie serwera np. 500 - wewnętrzny błąd serwera
66. Jakie adnotacje zastosujesz w JAX-RS do zdefinowania zasobu oraz reprezentacji która przyjmiesz (np. chcesz wysłać JSONa i dostać JSONa)?
Odpowiednio @Consumes i @Produces
67. Czym jest idempotentność?
Własność operacji pozwalająca na wielokrotne ich stosowanie bez zmiany wyniku
68. Co oznacza, że motoda jest bezpieczna?
Oznacza to, że nie modyfikuje zasobu
69. Czym jest i ile poziomów ma model dojrzałości Richardsona?
Model opisujący założenie usługi REST posiada 4 poziomy (0 - 3)
70. Opisz zerowy poziom dojrzałości Richardsona
The Swamp of POX - API nie wykorzystuje potencjału protokołu HTTP i nie spełnia założeń architektury REST
71. Opisz pierwszy poziom dojrzałości Richardsona
Resources - potrzebujemy wiele identyfikatorów URI, korzystamy zazwyczaj tylko z metod GET i POST
72. Opisz drugi poziom dojrzałości Richardsona
HTTP Verbs - korzystamy ze wszystkich metod HTTP, ale mamy wiele adresów URL na które wysyłamy zapytania w zależności od metody HTTP
73. Opisz trzeci poziom dojrzałości Richardsona
Hypermedia Controls - wymagana jest implementacja HATEOAS
74. Czym jest HATEOAS?
Hypermedia As The Engine Of Application State - komponent architektury REST, który dostracza informacji o pozostałych komponentach aplikacji poprzez hiperłącza
75. Czym jest GraphQL?
Jest to język zapytań, który udostępnia wspólny intefejs pomiędzy klientem a serwerem do pobierania i manipulowania danymi
76. Wymień podobieństwa SOA i mikroserwisów
- nie są monolitami - składają się z luźno powiązanych usług
- osobne teamy mogą tworzyć usługi
- każdy team może sobie wybrać stack technologiczny niezależnie
77. Wymień różnice pomiędzy SOA a mikroserwisami
- SOA posiada jedną bazę danych, a mikroserwisy trzymają niezależnie swoje dane
- SOA posiada dodatkową warstwę - ESB
78. Czym jest warstwa ESB w SOA?
Warstwa która możliwia dynamiczne przyłączanie i odłączanie usług wchodzących w skład systemu
79. Wymień i opisz style architektoniczne stosowane w podejściu usługowym
- EDA - Event Driven Architecture - tworzenie, wykrywanie, obsługiwanie i reagowanie na zdarzenia. Agenci emitują zdarzenia, a konsumenci odbierają.
- Wielowarstwowa -  dwuwarstwowa składa się z warstwy serwerowej i klienckiej, trójwarstwowa z warstwy prezentacji, logiki biznesowej i modelu danych (np MVC), wielowarstwowa może mieć do tego np. warstwę autentykacji i autoryzacji
80. Czym jest DDD?
Domain Driven Development - podejście do tworzenia oprogramowania kładące nacisk na takie definiowanie obiektów i komponentów systemu oraz ich zachowań, aby wiernie odzwierciedlały rzeczywistość. Dzięki temu można modelować systemy przez ekspertów mających wiedzę dziedzionową, ale niekoniecznie wiedzę o systemach informatycznych
81. Wymień elementy składowe DDD
- asocjacje -związki między bytami wchodzącymi w skład modelu dziedziny
- encje - obiekty posiadające tożsamość (dzięki temu możemy je wyszukiwać i porównywać z innymi)
- obiekty wartości - obiekty posiadające wartości, ale nie tożsamości 
- usługi - a chuj pierdolca z tym dostanę zaraz
- moduły
82. Wymień techniki realizacji asynchronizmu w aplikacjach biznesowych
- komunikacja przy użyciu kolejek komunikatów
- adnotacja @Asynchronous przy EJB
- asynchroniczne przetwarzanie przez serwlety
- web serwisy
- rest z adnotacją @Asynchronous
- web sockety
83. Jaka jest roznica pomiedzy standalone a domain w wildfly?
standalone mode to jeden proces jvm, jedno środowisko, kazdy server ma swoją konfiguracje
domain mode moze miec wiele serverow i cala konfiguracja jest rozdzielana z jednego miejsca
84. Mozliwe typy plikow do zdeployowania na Wildfly(cztery)
WAR – Web application archive
SAR – Service archive
JAR – Java Archive
EAR – Enterprise application archive
85.Jak można zdeployowac aplikacje(trzy sposoby)
admin console(localhost:najn-najn-najn-zero)
autodeploy(z ide np)
automation( z uzyciem automation tool)
